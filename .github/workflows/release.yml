name: Release

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        build: [linux, macos, win64]

        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: ggez-bouncing-ball
            archive: .tar.gz
            type: application/gzip
          - build: macos
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: ggez-bouncing-ball
            archive: .tar.gz
            type: application/gzip
          - build: win64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: ggez-bouncing-ball.exe
            archive: .zip
            type: application/zip
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get -yq --no-install-suggests --no-install-recommends install libx11-dev libxi-dev libgl1-mesa-dev libasound2-dev libudev-dev
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'stable' }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Package
        id: package
        shell: bash
        env:
          BUILD_NAME: ${{ matrix.build }}
          ARCHIVE_EXT: ${{ matrix.archive }}
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            strip -s "target/${{ matrix.target }}/release/${{ matrix.bin }}"
          elif [ "${{ runner.os }}" = "macOS" ]; then
            strip "target/${{ matrix.target }}/release/${{ matrix.bin }}"
          fi

          name=ggez-bouncing-ball
          release_name="$name-$BUILD_NAME"
          release_file="${release_name}${ARCHIVE_EXT}"
          mkdir "$release_name"

          if [ "${{ runner.os }}" = "Windows" ]; then
            7z a "$release_file" "$release_name"
          else
            tar czvf "$release_file" "$release_name"
          fi
          echo "::set-output name=asset_name::$release_file"
          echo "::set-output name=asset_path::$release_file"
      - name: Upload
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_name: ${{ steps.package.outputs.asset_name }}
          asset_path: ${{ steps.package.outputs.asset_path }}
          asset_content_type: ${{ matrix.type }}